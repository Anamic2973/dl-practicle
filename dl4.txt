import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models

# Load the ECG dataset
path = 'http://storage.googleapis.com/download.tensorflow.org/data/ecg.csv'
ecg_data = pd.read_csv(path, header=None)

# Preprocess the data
scaler = StandardScaler()
X = scaler.fit_transform(ecg_data.values)
y = X  # Autoencoder input and output are the same

# Split the data
X_train, X_test, _, _ = train_test_split(X, X, test_size=0.2, random_state=42)

# Define the Autoencoder model
input_dim = X_train.shape[1]

encoder = models.Sequential([
    layers.Input(shape=(input_dim,)),
    layers.Dense(32, activation='relu'),
    layers.Dense(16, activation='relu'),
    layers.Dense(8, activation='relu')
])

decoder = models.Sequential([
    layers.Input(shape=(8,)),
    layers.Dense(16, activation='relu'),
    layers.Dense(32, activation='relu'),
    layers.Dense(input_dim, activation='linear')
])

autoencoder = models.Sequential([encoder, decoder])
autoencoder.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
history = autoencoder.fit(X_train, X_train, epochs=100, batch_size=32, shuffle=True)

# Detect anomalies
y_pred = autoencoder.predict(X_test)
mse = np.mean(np.power(X_test - y_pred, 2), axis=1)

# Define a threshold for anomaly detection
threshold = np.percentile(mse, 95)

# Predict anomalies
anomalies = mse > threshold
num_anomalies = np.sum(anomalies)
print(f"Number of Anomalies: {num_anomalies}")

# Plot the anomalies
plt.figure(figsize=(12, 6))
plt.plot(mse, marker='o', linestyle='', markersize=3, label='MSE')
plt.axhline(threshold, color='r', linestyle='--', label='Anomaly Threshold')
plt.xlabel('Sample Index')
plt.ylabel('MSE')
plt.title('Anomaly Detection Results')
plt.legend()
plt.show()

# Visualize original vs reconstructed signals for normal and anomalous samples
plt.figure(figsize=(12, 6))
plt.plot(X_test[0], label='Original ECG')
plt.plot(y_pred[0], label='Reconstructed ECG')
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.legend()
plt.title('Normal ECG')
plt.show()

# List and visualize the anomalies
anomalies_index = [index for index, anomaly in enumerate(anomalies) if anomaly]

# Plot an example of an anomalous ECG
n = 4  # Change this index to view different anomalies
anomaly_index = anomalies_index[n] if len(anomalies_index) > n else None
if anomaly_index is not None:
    plt.figure(figsize=(12, 6))
    plt.plot(X_test[anomaly_index], label='Original Anomalous ECG')
    plt.plot(y_pred[anomaly_index], label='Reconstructed ECG')
    plt.xlabel('Time')
    plt.ylabel('Amplitude')
    plt.legend()
    plt.title(f'Anomalous ECG at index {anomaly_index}')
    plt.show()
else: print("Less than 4 anomalies detected. Please check 'anomalies_index' for details.")

  